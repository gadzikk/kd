SPIS:
:::JAVA:::
:::CONCURRENCY:::
:::MICROSERVICES:::
:::TESTOWANIE:::
:::WEB_FRAMEWORKS:::
:::WEBSERVICES:::
:::MESSAGING:::
:::FUNCTIONAL_PROGRAMMING:::
:::SCALA:::
:::HASKELL:::
:::MODERN_TOOLS:::
:::NO_SQL:::
:::SIECI:::
:::GIT:::
:::ALGORYTMY:::
:::ANGIELSKI:::
:::LINUX GREP SYSTEMY:::
:::ERROR EXCEPTIONS VALIDACJA:::
:::ENCRYPTION ENCODING HASLA HASH SALT:::
:::DEVOPS:::
:::KONFIGURACJA:::
:::CONTINOUS DEPLOYMENT:::
:::WIEDZA Z ARTYKULOW:::
:::PRAKTYCZNE PROJEKTY:::
:::SQL DATABASES:::
:::REACTIVE_PROGRAMMING:::
:::JAVASCRIPT:::
:::STUDIA:::
:::NIEZWIAZANE:::


0_:::JAVA:::
java,
https://www.journaldev.com/3884/java-is-pass-by-value-and-not-pass-by-reference
https://hackr.io/blog/what-is-java
http://tutorials.jenkov.com/java/what-is-java.html
https://www.geeksforgeeks.org/java-platform-independent/
https://www.geeksforgeeks.org/dynamic-method-dispatch-runtime-polymorphism-java/
OOP,
Zasady programowania obiektowego,
https://javapapers.com/oops/association-aggregation-composition-abstraction-generalization-realization-dependency/
https://raygun.com/blog/oop-concepts-java/
https://ell.stackexchange.com/questions/10749/realization-vs-implementation-of-a-computer-program
https://www.geeksforgeeks.org/understanding-classes-and-objects-in-java/
SOLID,
https://www.oodesign.com/design-principles.html
https://itnext.io/solid-principles-explanation-and-examples-715b975dcad4
https://www.digitalocean.com/community/conceptual_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design
Design patterns,
https://github.com/gadzikk/algorithms/tree/master/src/main/java/design_patterns
https://www.dofactory.com/forum/1590/factory-pattern-vs-abstract-factory-pattern
https://stackoverflow.com/questions/5739611/what-are-the-differences-between-abstract-factory-and-factory-design-patterns
Static (pelne przeznaczenie),
https://www.baeldung.com/java-static
https://www.geeksforgeeks.org/difference-between-static-and-non-static-method-in-java
https://www.geeksforgeeks.org/difference-between-static-and-non-static-variables-in-java
https://www.quora.com/When-do-Static-Variables-get-Garbage-Collected-in-Java
https://stackoverflow.com/questions/453023/are-static-fields-open-for-garbage-collection
Final (pelne przeznaczenie),
https://www.geeksforgeeks.org/final-keyword-java
Nested claseses (roznice),
http://tutorials.jenkov.com/java/nested-classes.html
https://stackoverflow.com/questions/70324/java-inner-class-and-static-nested-class
https://www.geeksforgeeks.org/anonymous-inner-class-java/
https://www.geeksforgeeks.org/local-inner-class-java/
Kolejnosc wykonania(constructor, postConstruct, static block, dependency injection),
https://www.baeldung.com/java-initialization
https://stackoverflow.com/questions/38068303/spring-autowiring-order-and-postconstruct
https://www.knitelius.com/2016/10/05/understanding-dependency-injection-part-2-postconstruct-and-constructor-injection/
https://www.programmersought.com/article/2749180297/
https://stackoverflow.com/questions/19561332/in-what-order-do-static-blocks-and-initialization-blocks-execute-when-using-inhe/35001374
https://www.geeksforgeeks.org/g-fact-26-the-initializer-block-in-java/
Recursion,
https://www.pixelstech.net/article/1474689232-Traditional-recursion-vs-Tail-recursion
https://www.geeksforgeeks.org/tail-recursion/
https://stackoverflow.com/questions/21426688/the-difference-between-head-tail-recursion
https://stackoverflow.com/questions/33923/what-is-tail-recursion
http://learnyouahaskell.com/recursion
Plik buffery,
http://tutorials.jenkov.com/java-io/index.html
https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html
https://www.baeldung.com/java-try-with-resources
Reflection,
http://tutorials.jenkov.com/java-reflection/index.html
https://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful
https://www.baeldung.com/java-reflection
Abstract class vs interface
https://www.journaldev.com/1607/difference-between-abstract-class-and-interface-in-java#difference-between-abstract-class-and-interface
https://javapapers.com/core-java/abstract-and-interface-core-java-2/difference-between-a-java-interface-and-a-java-abstract-class/
https://www.geeksforgeeks.org/difference-between-abstract-class-and-interface-in-java/
https://stackoverflow.com/questions/18777989/how-should-i-have-explained-the-difference-between-an-interface-and-an-abstract
Inheritance
https://www.journaldev.com/1775/multiple-inheritance-in-java
https://www.interviewsansar.com/order-execution-constructors-java-inheritance/
Rozne,
https://www.journaldev.com/2452/serialization-in-java
https://www.geeksforgeeks.org/instanceof-operator-vs-isinstance-method-in-java/
https://www.geeksforgeeks.org/strictfp-keyword-java/
https://www.baeldung.com/java-fail-safe-vs-fail-fast-iterator
https://akademiahakerow.pl/aktualnosci/pojedynczy-wpis/RoznicapomiedzyoperatoramiFail-safeaFail-fast
https://stackoverflow.com/questions/8759868/java-logical-operator-short-circuiting
https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist-in-java
https://www.javatpoint.com/difference-between-arraylist-and-linkedlist
https://stackoverflow.com/questions/10656471/performance-differences-between-arraylist-and-linkedlist
https://stackoverflow.com/questions/18734705/which-one-runs-faster-arraylist-or-linkedlist?noredirect=1&lq=1

https://www.geeksforgeeks.org/java
https://www.journaldev.com/2366/core-java-interview-questions-and-answers
https://www.journaldev.com/1330/java-collections-interview-questions-and-answers

book: Effective Java | Thinking in Java | Clean code | Designing Data-Intensive Applications

:JVM
Garbage collector struktura dzialanie,
https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html

Garbage collector tryby (oraz plusy I minusy),
https://www.baeldung.com/jvm-garbage-collectors
https://www.overops.com/blog/garbage-collectors-serial-vs-parallel-vs-cms-vs-the-g1-and-whats-new-in-java-8/
https://javapapers.com/java/types-of-java-garbage-collectors/
Metaspace,
https://www.baeldung.com/java-permgen-metaspace
https://www.geeksforgeeks.org/metaspace-in-java-8-with-examples/
Monitorowanie,
https://www.google.com/search?client=firefox-b-d&q=JVisualVM
https://blog.gceasy.io/2016/11/22/resolve-memory-leak/
https://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/geninfo/diagnos/using_threaddumps.html
https://helpx.adobe.com/pl/experience-manager/kb/TakeThreadDump.html
https://howtodoinjava.com/linux/how-to-get-thread-dump-in-linux-using-jstack/
http://openjdk.java.net/projects/code-tools/jmh/
stackOverFlowError,
https://stackoverflow.com/questions/214741/what-is-a-stackoverflowerror
outOfMemoryError,
https://stackoverflow.com/questions/37335/how-to-deal-with-java-lang-outofmemoryerror-java-heap-space-error
https://stackoverflow.com/questions/1596009/java-lang-outofmemoryerror-java-heap-space
https://www.baeldung.com/java-heap-dump-capture
https://docs.oracle.com/javase/7/docs/webnotes/tsg/TSG-VM/html/clopts.html
Jstack, jmap,
https://www.journaldev.com/1053/java-thread-dump-visualvm-jstack-kill-3-jcmd
https://www.baeldung.com/java-heap-dump-capture
https://linuxhint.com/jmap-and-jstack-tutorial/
https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstack.html
Alokacja obiektow,
https://www.baeldung.com/java-stack-heap
https://stackoverflow.com/questions/258120/what-is-the-memory-consumption-of-an-object-in-java
https://www.geeksforgeeks.org/g-fact-46/
https://javarevisited.blogspot.com/2013/01/difference-between-stack-and-heap-java.html#axzz6cg0eRsjW
Alkokacja watkow,
https://stackoverflow.com/questions/36898701/how-does-java-jvm-allocate-stack-for-each-thread
https://dzone.com/articles/how-much-memory-does-a-java-thread-take
https://stackoverflow.com/questions/10554604/memory-allocation-with-thread
JVM vs JRE vs JVM,
https://www.programiz.com/java-programming/jvm-jre-jdk
https://www.journaldev.com/546/difference-jdk-vs-jre-vs-jvm
Heap and stack
https://www.journaldev.com/4098/java-heap-space-vs-stack-memory
https://blog.usejournal.com/til-9-stack-and-heap-in-a-nutshell-48e61fe5d140
String pool,
https://medium.com/edureka/java-string-pool-5b5b3b327bdf
https://www.baeldung.com/java-string-pool
https://www.journaldev.com/797/what-is-java-string-pool
Early late bindings,
https://www.baeldung.com/java-static-dynamic-binding
https://www.techiedelight.com/difference-between-early-late-binding-java/
https://beginnersbook.com/2013/04/java-static-dynamic-binding/
https://www.geeksforgeeks.org/static-vs-dynamic-binding-in-java/
Weak strong refrence
https://stackoverflow.com/questions/9809074/java-difference-between-strong-soft-weak-phantom-reference
https://stackoverflow.com/questions/299659/whats-the-difference-between-softreference-and-weakreference-in-java
https://www.baeldung.com/java-weak-reference
programmr.com/blogs/what-every-java-developer-should-know-strong-and-weak-references



https://dzone.com/articles/understanding-jvm-internals
https://www.geeksforgeeks.org/jvm-works-jvm-architecture/
https://medium.com/better-programming/understand-threads-and-threading-in-java-8f706fc44d13
https://stackoverflow.com/questions/33344123/every-jvm-created-for-each-application-is-this-a-thread-or-a-process
https://www.infoworld.com/article/3336222/java-challengers-6-thread-behavior-in-the-jvm.html
https://www.infoworld.com/article/2076971/how-the-java-virtual-machine-performs-thread-synchronization.html
https://blog.jamesdbloom.com/JVMInternals.html
http://tutorials.jenkov.com/java-performance/index.html
https://www.journaldev.com/2856/java-jvm-memory-model-memory-management-in-java
https://www.geeksforgeeks.org/jvm-works-jvm-architecture/
https://www.geeksforgeeks.org/jvm-shutdown-hook-java/
https://www.geeksforgeeks.org/java-class-file/
https://en.wikipedia.org/wiki/Just-in-time_compilation
https://stackoverflow.com/questions/16568253/difference-between-jvm-and-hotspot
https://stackoverflow.com/questions/2423284/java-thread-garbage-collected-or-not

https://www.journaldev.com/349/java-classloader
https://www.baeldung.com/java-classloaders

:J8
Lambda, Streams, Map, reduce, collect, sorting, consumer, producer, supplier, function
https://www.journaldev.com/2763/java-8-functional-interfaces
https://www.journaldev.com/2774/java-8-stream
https://www.geeksforgeeks.org/difference-between-streams-and-collections-in-java/
https://stackoverflow.com/questions/39432699/what-is-the-difference-between-streams-and-collections-in-java-8
https://www.java2novice.com/java_interview_questions/java-8-stream-terminal-operations/
https://www.java2novice.com/java_interview_questions/java-8-stream-intermediate-operations/
https://www.concretepage.com/java/java-8/
https://mkyong.com/tutorials/java-8-tutorials/
http://zetcode.com/java/streamreduce/
https://mkyong.com/java8/java-8-convert-list-to-map/
https://mkyong.com/java8/java-8-convert-a-stream-to-list/
https://mkyong.com/java8/java-8-how-to-sum-bigdecimal-using-stream/
https://javadevcentral.com/java-stream-sum
https://stackoverflow.com/questions/21219667/stream-and-lazy-evaluation

Nowe wersje javy co wprowadzono,
https://mkyong.com/java/what-is-new-in-java-11/
https://mkyong.com/java/what-is-new-in-java-12/
https://mkyong.com/java/what-is-new-in-java-13/
https://mkyong.com/java/what-is-new-in-java-14/
https://mkyong.com/java/what-is-new-in-java-15/
https://www.journaldev.com/2389/java-8-features-with-examples
https://www.journaldev.com/13106/java-9-modules
https://www.journaldev.com/13121/java-9-features-with-examples
https://www.journaldev.com/20395/java-10-features
https://www.journaldev.com/24601/java-11-features
https://www.journaldev.com/28666/java-12-features
https://www.journaldev.com/33204/java-13-features
https://www.journaldev.com/37273/java-14-features


Book: java8 in action

:JLibaries
https://dzone.com/articles/20-useful-open-source-libraries-for-java-programme


0_:::CONCURRENCY:::
Concurrency ogolnie,
https://practice.geeksforgeeks.org/problems/what-are-the-advantages-of-concurrency
http://tutorials.jenkov.com/java-concurrency/benefits.html
http://tutorials.jenkov.com/java-concurrency/costs.html
https://javarevisited.blogspot.com/2015/05/top-10-java-multithreading-and.html#axzz5Neevu8QO
https://practice.geeksforgeeks.org/problems/what-are-the-advantages-of-concurrency
https://sceweb.uhcl.edu/helm/RationalUnifiedProcess/process/workflow/ana_desi/co_cncry.htm
https://docs.oracle.com/cd/E13203_01/tuxedo/tux71/html/pgthr5.htm
https://www.programmersought.com/article/38971341326/
http://www.justobjects.org/cowcatcher/browse/stdjava/slides/java-essential/core/thread/slide.0.4.html
https://medium.com/@recepinancc/til-8-concurrency-and-parallelism-in-a-nutshell-d19f379241c9
https://www.multisoftvirtualacademy.com/blog/common-advantages-and-disadvantages-of-multithreading-in-java/
Watki ogolnie,
https://stackoverflow.com/questions/4315292/concurrency-processes-vs-threads
https://www.geeksforgeeks.org/difference-between-process-and-thread/
https://techdifferences.com/difference-between-process-and-thread-in-java.html
https://www.guru99.com/difference-between-process-and-thread.html
https://www.codejava.net/java-core/concurrency/understanding-thread-priorities-and-daemon-thread-in-java
https://www.codejava.net/java-core/concurrency/understanding-thread-states-thread-life-cycle-in-java
https://www.baeldung.com/java-thread-stop
https://www.geeksforgeeks.org/killing-threads-in-java/
https://www.codejava.net/java-core/concurrency/how-to-use-threads-in-java-create-start-pause-interrupt-and-join
https://www.geeksforgeeks.org/difference-between-thread-start-and-thread-run-in-java/
https://stackoverflow.com/questions/8579657/whats-the-difference-between-thread-start-and-runnable-run
https://docs.oracle.com/javase/1.5.0/docs/guide/misc/threadPrimitiveDeprecation.html
https://www.baeldung.com/java-daemon-thread
https://stackoverflow.com/questions/2213340/what-is-a-daemon-thread-in-java
https://www.baeldung.com/java-threading-models
Deadlock,
https://docs.oracle.com/javase/tutorial/essential/concurrency/deadlock.html
https://medium.com/@recepinancc/til-10-what-is-a-deadlock-c00753c349f6
https://www.baeldung.com/java-deadlock-livelock
https://dev.to/javinpaul/java-concurrency-tutorial-how-to-avoid-deadlock-in-java-4aeb
http://tutorials.jenkov.com/java-concurrency/deadlock.html
http://tutorials.jenkov.com/java-concurrency/deadlock-prevention.html
https://howtodoinjava.com/java/multi-threading/writing-a-deadlock-and-resolving-in-java/
https://www.geeksforgeeks.org/deadlock-in-java-multithreading/
https://www.geeksforgeeks.org/deadlock-prevention/
https://www.geeksforgeeks.org/deadlock-detection-recovery
https://www.geeksforgeeks.org/deadlock-starvation-and-livelock/
https://stackoverflow.com/questions/6155951/whats-the-difference-between-deadlock-and-livelock
Starvation,
https://docs.oracle.com/javase/tutorial/essential/concurrency/starvelive.html
http://tutorials.jenkov.com/java-concurrency/starvation-and-fairness.html
https://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java
https://www.netjstech.com/2017/10/thread-starvation-in-java-multi-threading.html
https://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/thread-starvation.html
Pararellism,
https://www.geeksforgeeks.org/introduction-to-parallel-computing/
https://www.geeksforgeeks.org/what-is-parallel-processing/
Producer consumer,
Dinning philosopers,
Race condition,
https://stackoverflow.com/questions/34510/what-is-a-race-condition
http://tutorials.jenkov.com/java-concurrency/race-conditions-and-critical-sections.html
https://javarevisited.blogspot.com/2012/02/what-is-race-condition-in.html#axzz6crABS0OE
Critical Section
https://stackoverflow.com/questions/416183/in-java-critical-sections-what-should-i-synchronize-on
Synchronization, Mutex, Sempahores,
https://stackoverflow.com/questions/16907992/synchronized-vs-semaphore
https://stackoverflow.com/questions/5083818/is-it-better-to-synchronize-with-semaphores-or-with-monitors?lq=1
https://stackoverflow.com/questions/2332765/lock-mutex-semaphore-whats-the-difference
Volatile vs Atomic,
https://www.geeksforgeeks.org/volatile-keyword-in-java/
https://stackoverflow.com/questions/19744508/volatile-vs-atomic
https://stackoverflow.com/questions/3786825/volatile-boolean-vs-atomicboolean
https://stackoverflow.com/questions/3519664/difference-between-volatile-and-synchronized-in-java
https://javarevisited.blogspot.com/2020/04/difference-between-atomic-volatile-and-synchronized-in-java-multi-threading.html#axzz6cYHaqKSJ
Optimistic pessimistic locking,
https://medium.com/@recepinancc/til-9-optimistic-vs-pessimistic-locking-79a349b76dc8
Concurrent collections
https://javarevisited.blogspot.com/2013/02/concurrenthashmap-in-java-example-tutorial-working.html#axzz6crABS0OE
https://javarevisited.blogspot.com/2011/04/difference-between-concurrenthashmap.html#axzz6crABS0OE
http://tutorials.jenkov.com/java-concurrency/blocking-queues.html
https://stackoverflow.com/questions/28979488/difference-between-copyonwritearraylist-and-synchronizedlist
https://howtodoinjava.com/java/collections/arraylist/synchronize-arraylist/
https://www.java67.com/2015/06/difference-between-synchronized-arraylist-and-copyOnWriteArrayList-java.html
https://www.quora.com/What-are-the-pros-and-cons-of-CopyOnWriteArrayList-vs-Collections-SynchronizedList-When-do-we-choose-one-over-another
https://stackoverflow.com/questions/8203864/choosing-the-best-concurrency-list-in-java
https://stackoverflow.com/questions/6992608/why-there-is-no-concurrenthashset-against-concurrenthashmap
https://javarevisited.blogspot.com/2017/08/how-to-create-thread-safe-concurrent-hashset-in-java-8.html#axzz6dJx1INNi
https://www.java67.com/2017/08/how-to-create-concurrenthashset-from-concurrentHashMap-Java-example.html
Locks,
http://flex4java.blogspot.com/2015/02/lock-reentrantlock-reentrantreadwritelo.html
https://examples.javacodegeeks.com/core-java/util/concurrent/locks-concurrent/reentrantlock/java-reentrantreadwritelock-example/
https://www.overops.com/blog/java-8-stampedlocks-vs-readwritelocks-and-synchronized/
https://bowenli86.github.io/2016/04/20/java/concurrency/Java-Concurrency-ReentrantLock/
https://www.codejava.net/java-core/concurrency/java-readwritelock-and-reentrantreadwritelock-example
https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html
https://www.baeldung.com/java-concurrent-locks
http://tutorials.jenkov.com/java-concurrency/read-write-locks.html
http://tutorials.jenkov.com/java-concurrency/locks.html#reentrance
https://stackoverflow.com/questions/36799339/whats-the-difference-between-lock-and-reentrantlock-in-java-5
https://javarevisited.blogspot.com/2013/03/reentrantlock-example-in-java-synchronized-difference-vs-lock.html#axzz6dQCKLI2v
Phaser,
https://www.baeldung.com/java-phaser
https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html
https://www.geeksforgeeks.org/java-util-concurrent-phaser-class-in-java-with-examples/
https://www.netjstech.com/2016/01/phaser-in-java-concurrency.html
Exhanger,
https://codecouple.pl/2018/12/14/exchanger-czyli-wymieniamy-obiekty-pomiedzy-watkami/
http://tutorials.jenkov.com/java-util-concurrent/exchanger.html
https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Exchanger.html
https://www.baeldung.com/java-exchanger
https://javarevisited.blogspot.com/2020/04/how-to-use-exchanger-in-java-with-example.html#axzz6dQCKLI2v
https://www.geeksforgeeks.org/java-util-concurrent-exchanger-class-with-examples/
https://examples.javacodegeeks.com/core-java/util/concurrent/exchanger/java-util-concurrent-exchanger-example/
https://www.netjstech.com/2016/02/exchanger-in-java-concurrency.html
Jenkov,
http://tutorials.jenkov.com/java-concurrency/index.html
http://tutorials.jenkov.com/java-util-concurrent/index.html
Wyklady kalety,
Rozne,
https://www.geeksforgeeks.org/inter-thread-communication-java/
http://tutorials.jenkov.com/java-concurrency/non-blocking-algorithms.html

https://javarevisited.blogspot.com/2014/07/top-50-java-multithreading-interview-questions-answers.html#axzz4jaJmaqbE
https://www.journaldev.com/1162/java-multithreading-concurrency-interview-questions-answers

book: Java Concurrency in practice | concurrency cookbook | https://medium.com/javarevisited/6-multithreading-and-concurrency-books-every-java-programmer-should-read-b6a08d2aae54

0_:::MICROSERVICES:::
Microservice vs monotlith,
https://microservices.io/patterns/microservices.html
https://www.geeksforgeeks.org/microservices-introduction/
https://www.geeksforgeeks.org/monolithic-vs-microservices-architecture/
https://medium.com/@goodrebels/to-go-or-not-to-go-micro-the-pros-and-cons-of-microservices-7967418ff06
https://cloudacademy.com/blog/microservices-architecture-challenge-advantage-drawback/
https://tsh.io/blog/basics-of-microservices-pros-and-cons/
https://martinfowler.com/articles/microservices.html
https://www.springboottutorial.com/creating-microservices-with-spring-boot-part-1-getting-started
https://searchapparchitecture.techtarget.com/tip/The-key-differences-between-stateless-and-stateful-microservices
https://blog.container-solutions.com/microservices-thinking-outside-monolith
https://dzone.com/articles/patterns-for-microservices-sync-vs-async
https://dzone.com/articles/design-patterns-for-microservices
DDD,
https://stackoverflow.com/questions/5325836/what-is-domain-driven-design
https://stackoverflow.com/questions/1222392/what-is-domain-driven-design-ddd/1222488#1222488
https://en.wikipedia.org/wiki/Domain-driven_design
https://microservices.io/patterns/data/domain-event.html
https://martinfowler.com/bliki/DomainDrivenDesign.html
https://martinfowler.com/bliki/DDD_Aggregate.html
https://vaadin.com/learn/tutorials/ddd/strategic_domain_driven_design
https://www.infoq.com/articles/ddd-in-practice/
https://threedots.tech/post/ddd-lite-in-go-introduction/
https://www.dddcommunity.org/learning-ddd/what_is_ddd/
https://blog.aspiresys.pl/technology/introduction-to-domain-driven-design/
https://www.geeksforgeeks.org/domain-driven-design-ddd/
https://simpleprogrammer.com/importance-domain-driven-design/
https://dzone.com/articles/an-introduction-to-domain-driven-design-and-its-be
https://airbrake.io/blog/software-design/domain-driven-design
https://www.informit.com/articles/article.aspx?p=1944876&seqNum=4
Resilience patters,
https://dzone.com/articles/circuit-breaker-pattern
https://medium.com/asos-techblog/improve-availability-and-resilience-of-your-micro-services-using-this-7-cloud-design-patterns-16006eaf32b1
https://www.jrebel.com/blog/microservices-resilience-patterns
https://searchapparchitecture.techtarget.com/tip/3-microservices-resiliency-patterns-for-better-reliability
https://blog.codecentric.de/en/2019/06/resilience-design-patterns-retry-fallback-timeout-circuit-breaker/
https://dzone.com/articles/libraries-for-microservices-development
https://dzone.com/articles/making-your-microservices-resilient-and-fault-tole-1
https://medium.com/@narengowda/what-is-circuitbreaking-in-microservices-2053f4f66882
https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker
https://stackoverflow.com/questions/39622142/resilient-microservices-design-pattern
retry | timeout | curcuit breaker | bulkhead | stateless service | compensating transaction | throttling | rate limiter | health endpoint monitoring | load leveling | external configuration | correlation id
https://www.vinsguru.com/circuit-breaker-pattern/
https://www.vinsguru.com/timeout-pattern-microservice-design-patterns/
https://www.vinsguru.com/retry-pattern-microservice-design-patterns/
https://www.vinsguru.com/bulkhead-pattern-microservice-design-patterns/
https://docs.microsoft.com/en-us/azure/architecture/patterns/bulkhead
https://stackoverflow.com/questions/30391809/what-is-bulkhead-pattern-used-by-hystrix
https://akfpartners.com/growth-blog/bulkhead-pattern
https://stackoverflow.com/questions/60990475/what-is-the-difference-between-a-circuit-breaker-and-a-bulkhead-pattern
https://www.vinsguru.com/rate-limiter-pattern/
https://use-cases.org/2020/04/23/differences-between-rate-limiting-and-throttling/
https://medium.com/@thisara.udaya/api-throttling-and-rate-limiting-4835ce901857
https://membrane-soa.org/service-proxy-doc/4.2/rate-limiting.htm
https://akfpartners.com/growth-blog/microservice-aggregator-pattern
Transaction patterns,
https://medium.com/swlh/handling-transactions-in-the-microservice-world-c77b275813e0
https://developers.redhat.com/blog/2018/10/01/patterns-for-distributed-transactions-within-a-microservices-architecture/
https://techrocking.com/patterns-for-transaction-in-microservices/
https://thorben-janssen.com/distributed-transactions-microservices/
Saga,
https://microservices.io/patterns/data/saga.html
https://techrocking.com/microservices-orchestration-command-pattern/
https://techrocking.com/microservices-choreography-event-pattern/
https://dzone.com/articles/saga-pattern-how-to-implement-business-transaction-1
https://github.com/berndruecker/trip-booking-saga-java/blob/master/src/main/java/io/flowing/trip/saga/camunda/springboot/TripBookingSaga.java
https://medium.com/@ydorego/microservices-orchestration-vs-choreography-the-eternal-saga-d58c35e07d81
https://blog.couchbase.com/saga-pattern-implement-business-transactions-using-microservices-part/
Two Phase Commit,
https://stackoverflow.com/questions/7389382/two-phase-commit
https://medium.com/@sauravomar01/2pc-two-phase-commit-protocol-4ba47e441cdf
https://www.educative.io/edpresso/what-is-the-two-phase-commit-protocol
Deployment patterns,
https://microservices.io/patterns/
https://dzone.com/articles/right-strategies-for-microservices-deployment
https://www.nginx.com/blog/deploying-microservices/
Api gateway,
https://medium.com/dev-genius/microservices-design-api-gateway-pattern-980e8d02bdd5
https://techrocking.com/spring-cloud-zuul-proxy-as-api-gateway/
https://microservices.io/patterns/apigateway.html
https://www.nginx.com/learn/api-gateway/
https://codecouple.pl/2018/03/16/31-spring-boot-zuul-api-gateway/
Service Registration,
https://dzone.com/articles/getting-started-with-microservices-2
https://vaadin.com/learn/tutorials/microservices/service-registration-and-discovery
https://microservices.io/patterns/service-registry.html
https://microservices.io/patterns/self-registration.html
https://microservices.io/patterns/3rd-party-registration.html
https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/
CQRS,
https://microservices.io/patterns/data/cqrs.html
https://stackoverflow.com/questions/47048839/cqrs-and-event-sourcing-difference
https://stackoverflow.com/questions/60523277/event-sourcing-and-cqrs-what-did-i-missed
https://stackoverflow.com/questions/8820748/when-to-use-the-cqrs-design-pattern
https://community.risingstack.com/when-to-use-cqrs/
https://martinfowler.com/bliki/CQRS.html
https://stackoverflow.com/questions/33279680/what-are-the-disadvantages-of-using-event-sourcing-and-cqrs
https://www.infoq.com/news/2015/05/cqrs-advantages/
https://docs.microsoft.com/pl-pl/azure/architecture/patterns/cqrs
https://www.beautifulcode.co/blog/3-advantages-of-separating-command-query-responsibilities-for-a-dat
https://nexocode.com/blog/posts/cqrs-and-event-sourcing/
https://stackoverflow.com/questions/3234831/cqrs-synchronizing-the-write-and-read-databases
https://thenewstack.io/how-cqrs-works-with-spring-tools/
Event Sourcing,
https://microservices.io/patterns/data/event-sourcing.html
https://bulldogjob.pl/articles/122-cqrs-i-event-sourcing-czyli-latwa-droga-do-skalowalnosci-naszych-systemow_
https://socodeit.pl/2019/09/event-sourcing/
https://martinfowler.com/eaaDev/EventSourcing.html
https://www.euvic.pl/event-sourcing-bez-tajemnic/
https://eventuate.io/whyeventsourcing.html
https://docs.microsoft.com/pl-pl/azure/architecture/patterns/event-sourcing
https://softwaremill.com/entry-level-event-sourcing/
SOA,
Architektura Hexagonalna,
https://www.jcommerce.pl/jpro/artykuly/porty-i-adaptery-w-praktyce
https://blog.allegro.tech/2020/05/hexagonal-architecture-by-example.html
https://netflixtechblog.com/ready-for-changes-with-hexagonal-architecture-b315ec967749
Scalability,
https://searchdatacenter.techtarget.com/definition/scalability
https://medium.com/@Pointnity_Network/three-dimensions-of-distributed-system-scalability-design-8e0319163c8d
https://medium.com/swlh/building-scalable-distributed-systems-part-1-introduction-to-scalable-systems-9ca471fd77d7
https://www.math.unipd.it/~abujari/fis1819/lecSlides/scalability.pdf
https://stackoverflow.com/questions/34711353/two-questions-about-distributed-systems-scalability-and-mutual-exclusion
https://stackoverflow.com/questions/214246/what-does-scalability-mean-to-you
https://www.quora.com/What-is-scalable-system-in-distributed-system
https://stackoverflow.com/questions/63027668/is-distributed-systems-same-as-horizontal-scaling

https://microservices.io/



Books: microservices patterns

0_:::TESTOWANIE:::
Testy unit,
testy Integracyjne,
testy funkcjonalne,
testy E2E,

junit5, assertJ, mockito

TDD – podejscie, prons cons, praktyka
Piramida testow,
http://www.agilenutshell.com/episodes/41-testing-pyramid
https://www.baeldung.com/spring-test-pyramid-practical-example
https://martinfowler.com/articles/practical-test-pyramid.html
https://martinfowler.com/bliki/TestPyramid.html
https://medium.com/@mateuszroth/why-the-test-pyramid-is-a-bullshit-guide-to-testing-towards-modern-frontend-and-backend-apps-4246e89b87bd
https://medium.com/better-programming/the-test-pyramid-80d77535573
manual vs automated testing,
https://www.guru99.com/difference-automated-vs-manual-testing.html
https://dzone.com/articles/automated-testing-vs-manual-testing
https://www.testim.io/blog/test-automation-vs-manual-testing/
https://www.qamadness.com/manual-testing-vs-automated-testing/
blackbox testing,
https://softwaretestingfundamentals.com/black-box-testing/
https://www.imperva.com/learn/application-security/black-box-testing/
https://www.softwaretestinghelp.com/black-box-testing/
rodzaje testow,
https://www.guru99.com/load-testing-tutorial.html
https://www.guru99.com/performance-testing.html
https://www.guru99.com/scalability-testing.html
https://www.geeksforgeeks.org/software-testing-scalability-testing/
https://stackoverflow.com/questions/18950746/performance-stress-testing-java-ee-applications
https://www.softwaretestinghelp.com/performance-testing-tools-load-testing-tools/
https://www.geeksforgeeks.org/differences-between-black-box-testing-vs-white-box-testing/
https://www.geeksforgeeks.org/differences-between-white-box-testing-and-gray-box-testing/
https://www.geeksforgeeks.org/difference-between-black-box-testing-and-gray-box-testing/
https://www.javatpoint.com/black-box-testing-vs-white-box-testing-vs-grey-box-testing
https://www.javatpoint.com/acceptance-testing
narzedzia,
https://hackernoon.com/5-courses-java-programmers-can-join-to-learn-junit-and-mockito-in-2019-h74t38r4
https://www.softwaretestinghelp.com/performance-testing-tools-load-testing-tools/
https://www.guru99.com/performance-testing-tools.html

book: tdd teoria, https://javarevisited.blogspot.com/2014/08/top-5-books-to-learn-unit-testing-junit-tdd-Java-programmers.htm

0_:::WEB_FRAMEWORKS:::
:Spring,
https://stackoverflow.com/questions/7779509/setter-di-vs-constructor-di-in-spring/22033945
https://stackoverflow.com/questions/21218868/explain-why-constructor-inject-is-better-than-other-options
http://www.vinsguru.com/reactive-programming-a-simple-introduction/
https://docs.spring.io/spring-hateoas/docs/current/reference/html/#reference
http://olivergierke.de/2013/11/why-field-injection-is-evil/
https://stackoverflow.com/questions/9403155/what-is-dependency-injection-and-inversion-of-control-in-spring-framework
https://stackoverflow.com/questions/1099025/spring-transactional-what-happens-in-background
https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/html/beans.html#beans-setter-injection
https://javarevisited.blogspot.com/2012/11/difference-between-setter-injection-vs-constructor-injection-spring-framework.html#axzz6e4gAepjG
https://stackoverflow.com/questions/17193365/what-in-the-world-are-spring-beans
https://stackoverflow.com/questions/44475523/how-to-understand-bean-in-spring
https://www.baeldung.com/java-threading-models
https://www.baeldung.com/spring-framework-design-patterns
https://www.e4developer.com/2018/03/30/introduction-to-concurrency-in-spring-boot/
https://www.baeldung.com/spring-framework-design-patterns
https://springframework.guru/gang-of-four-design-patterns/proxy-pattern/
https://dzone.com/articles/spring-and-threads-taskexecutor
https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/overview.html
https://stackoverflow.com/questions/53579112/inject-list-of-all-beans-with-a-certain-interface/53579193

:Spring webflux-reactor
https://stackoverflow.com/questions/45019486/threading-model-of-spring-webflux-and-reactor
https://singhkaushal.medium.com/spring-webflux-eventloop-vs-thread-per-request-model-a42d07ee8502
https://dzone.com/articles/spring-webflux-eventloop-vs-thread-per-request-mod
https://piotrminkowski.com/2020/03/30/a-deep-dive-into-spring-webflux-threading-model/
https://www.baeldung.com/spring-webflux-concurrency
https://bykowski.pl/programowanie-reaktywne-czym-jest-i-kiedy-stosowac/
https://bykowski.pl/spring-webflux-programowanie-reaktywne-w-spring/
https://www.reactivemanifesto.org/
https://www.baeldung.com/spring-webflux
https://nullpointerexception.pl/spring-webflux-reaktywny-spring/
https://howtodoinjava.com/spring-webflux/spring-webflux-tutorial/
https://projectreactor.io/docs/core/release/reference/
https://dzone.com/articles/spring-webflux-eventloop-vs-thread-per-request-mod
https://piotrminkowski.com/2020/03/30/a-deep-dive-into-spring-webflux-threading-model/
https://stackoverflow.com/questions/45019486/threading-model-of-spring-webflux-and-reactor




books: pro spring 5
:Hibernate
https://stackoverflow.com/questions/5370482/whats-the-advantage-of-load-vs-get-in-hibernate
https://javarevisited.blogspot.com/2012/07/hibernate-get-and-load-difference-interview-question.html#axzz6dQCKLI2v
https://howtodoinjava.com/hibernate/lazy-loading-in-hibernate/
https://howtodoinjava.com/hibernate/understanding-hibernate-first-level-cache-with-example/
https://howtodoinjava.com/hibernate/how-hibernate-second-level-cache-works/
https://stackoverflow.com/questions/8046662/hibernate-opensession-vs-getcurrentsession
https://java2blog.com/difference-opensession-getcurrentsession-hibernate/
https://www.javatpoint.com/jpa-vs-hibernate
https://stackoverflow.com/questions/9881611/whats-the-difference-between-jpa-and-hibernate
https://dzone.com/articles/what-is-the-difference-between-hibernate-and-sprin-1
n+1 problem,
https://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem-in-orm-object-relational-mapping
https://stackoverflow.com/questions/6838574/difference-between-left-join-and-left-join-fetch-in-hibernate
https://stackoverflow.com/questions/49118193/hibernate-left-join-fetch-with-multiple-columns-for-the-join
https://stackoverflow.com/questions/17431312/what-is-the-difference-between-join-and-join-fetch-when-using-jpa-and-hibernate
lazy initalization exception,
https://thorben-janssen.com/lazyinitializationexception/
https://vladmihalcea.com/the-best-way-to-handle-the-lazyinitializationexception/
https://www.baeldung.com/hibernate-initialize-proxy-exception
https://stackoverflow.com/questions/21574236/how-to-fix-org-hibernate-lazyinitializationexception-could-not-initialize-prox
inheritance w hibernate,
https://thorben-janssen.com/complete-guide-inheritance-strategies-jpa-hibernate/
https://www.baeldung.com/hibernate-inheritance
https://www.javatpoint.com/hibernate-inheritance-mapping-tutorial
https://vladmihalcea.com/the-best-way-to-use-entity-inheritance-with-jpa-and-hibernate/
optimistic/pesimitic locking,
versioning
https://www.journaldev.com/3633/hibernate-interview-questions-and-answers
https://www.edureka.co/blog/interview-questions/hibernate-interview-questions/

Books: hibernate in action 

Books: J2EE developer handbook | Core j2ee patterns – przejzec | 00 – przejrzec

0_:::WEBSERVICES:::
SOAP,
REST,
https://restfulapi.net/
https://www.mulesoft.com/resources/api/what-is-rest-api-design
https://blog.restcase.com/4-maturity-levels-of-rest-api-design/
https://searchapparchitecture.techtarget.com/definition/RESTful-API
https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming
https://stackoverflow.com/questions/2190836/what-is-the-difference-between-http-and-rest
https://martinfowler.com/articles/richardsonMaturityModel.html
https://restfulapi.net/richardson-maturity-model/
https://bykowski.pl/hateoas-czym-jest-jak-wdrozyc-i-po-co-to-komu/
https://geek.justjoin.it/hateoas-api-moze-byc-lepsze
https://www.infoq.com/news/2009/04/hateoas-restful-api-advantages/
https://softwareengineering.stackexchange.com/questions/149124/what-is-the-benefit-of-hypermedia-hateoas
https://medium.com/@andreasreiser94/why-hateoas-is-useless-and-what-that-means-for-rest-a65194471bc8
https://varunpatil.me/blog/posts/hateoas/
RESTClient,
HTTP (jak dziala, statusy, odpowiedzi, filtry, servlety),
https://www.restapitutorial.com/httpstatuscodes.html
https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
https://pl.wikipedia.org/wiki/Hypertext_Transfer_Protocol
Internetowe,
https://www.journaldev.com/1907/java-session-management-servlet-httpsession-url-rewriting
https://hazelcast.com/glossary/web-session/
http://www.rodsonluo.com/client-session-vs-server-session
https://stackoverflow.com/questions/3467114/how-are-cookies-passed-in-the-http-protocol
https://humanwhocodes.com/blog/2009/05/05/http-cookies-explained/
https://en.wikipedia.org/wiki/Cross-site_request_forgery
https://en.wikipedia.org/wiki/Cross-site_scripting
https://blog.sean-wright.com/session-management-client-side-vs-server-side/
https://mansfeld.pl/bezpieczenstwo/cors-co-to-jest-jak-obejsc-ajax/
https://sekurak.pl/czym-jest-cors-cross-origin-resource-sharing-i-jak-wplywa-na-bezpieczenstwo/
https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

Books: J2EE essentials | Java Web Services

0_:::MESSAGING:::
JMS,persistent vs nonpersistent | pub sub vs ptp | problem | queue vs topic,
JMS vs Kafka,
https://www.knowledgenile.com/blogs/apache-kafka-vs-jms
http://cloudurable.com/blog/kafka-vs-jms/index.html
https://stackoverflow.com/questions/42664894/jms-vs-kafka-in-specific-conditions
https://www.oracle.com/technical-resources/articles/java/intro-java-message-service.html
Integration patterns,
https://www.javacodegeeks.com/2012/11/introduction-to-enterprise-integration-patterns.html
https://dzone.com/articles/introduction-to-integration-patterns
https://www.enterpriseintegrationpatterns.com/patterns/messaging/Introduction.html


0_:::FUNCTIONAL_PROGRAMMING:::
Fp ogolnie,
https://www.tutorialspoint.com/functional_programming/functional_programming_introduction.htm
https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0
https://en.wikipedia.org/wiki/Functional_programming
https://en.wikipedia.org/wiki/First-class_function
https://en.wikipedia.org/wiki/Pure_function
https://en.wikipedia.org/wiki/Side_effect_(computer_science)
https://www.geeksforgeeks.org/functional-programming-paradigm/
https://wiki.haskell.org/Functional_programming
https://wiki.haskell.org/Partial_functions
https://serokell.io/blog/introduction-to-functional-programming
https://medium.com/virtuslab/oop-vs-fp-the-pursuit-of-extensibility-part-1-31029591c3b4
https://nrinaudo.github.io/scala-best-practices/definitions/referential_transparency.html
https://en.wikipedia.org/wiki/Referential_transparency
https://www.sitepoint.com/what-is-referential-transparency/
https://lispcast.com/what-is-a-total-function/
https://softwareengineering.stackexchange.com/questions/334874/in-the-context-of-functional-programming-what-are-total-functions-and-partia
https://en.wikipedia.org/wiki/Total_functional_programming
Pros and cons of functional programming,
https://spin.atomicobject.com/2019/08/29/functional-prog-pros-cons/
https://www.researchgate.net/post/What-are-the-advantages-and-disadvantages-of-functional-programming
https://syndicode.com/blog/pros-and-cons-of-functional-programming/
https://www.quora.com/What-are-the-advantages-of-functional-programming-over-object-oriented-programming-What-are-some-languages-that-are-mainly-functional
https://hackr.io/blog/functional-programming
https://blog.knoldus.com/functional-programming-a-paradigm/
http://alvinalexander.com/scala/fp-book/benefits-of-functional-programming/
https://alvinalexander.com/scala/fp-book/disadvantages-of-functional-programming/
Fp for concurrency
https://softwareengineering.stackexchange.com/questions/310159/is-functional-programming-faster-in-multithreading-because-i-write-things-differ
https://www.quora.com/Why-does-functional-programming-favor-concurrency
https://freecontent.manning.com/the-foundations-of-functional-concurrency/
https://dzone.com/articles/java-using-immutable-classes-for-concurrent-programming
https://stackoverflow.com/questions/214714/mutable-vs-immutable-objects
Monads,
https://blog.knoldus.com/understanding-monads-an-introduction/
https://stackoverflow.com/questions/14576543/why-can-applicative-functors-have-side-effects-but-functors-cant
https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html
https://medium.com/@lettier/your-easy-guide-to-monads-applicatives-functors-862048d61610
https://stackoverflow.com/questions/44965/what-is-a-monad
https://stackoverflow.com/questions/35698485/how-is-list-a-monad
Lazy evauluation,
https://www.tutorialspoint.com/functional_programming/functional_programming_lazy_evaluation.htm
https://stackoverflow.com/questions/265392/why-is-lazy-evaluation-useful
https://www.learningjournal.guru/article/scala/functional-programming/non-strict-lazy-evaluations-in-functional-programming/
https://stackoverflow.com/questions/24704503/lazy-evaluation-why-is-it-faster-advantages-vs-disadvantages-mechanics-why-i
https://www.geeksforgeeks.org/scala-lazy-evaluation/
https://softwareengineering.stackexchange.com/questions/124500/why-isnt-lazy-evaluation-used-everywhere
Higher order functions
https://www.magicweb.pl/programowanie/programowanie-funkcyjne-higher-order-functions/
https://docs.scala-lang.org/tour/higher-order-functions.html
Closures,
https://stackoverflow.com/questions/36636/what-is-a-closure
https://stackoverflow.com/questions/220658/what-is-the-difference-between-a-closure-and-a-lambda/36878651#36878651
https://stackoverflow.com/questions/220658/what-is-the-difference-between-a-closure-and-a-lambda
https://stackoverflow.com/questions/40089429/the-place-of-closures-in-functional-programming
https://softwareengineering.stackexchange.com/questions/40454/what-is-a-closure
https://medium.com/beginners-guide-to-mobile-web-development/closures-in-functional-programming-and-javascript-3ed730e08fc2
https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36
Functional programming patterns,
https://github.com/caiorss/Functional-Programming/blob/master/haskell/Functional_Programming_Concepts.org
https://spin.atomicobject.com/2019/08/22/functional-programming-patterns/
https://www.freecodecamp.org/news/functional-programming-patterns-cookbook-3a0dfe2d7e0a/
https://www.slideshare.net/ScottWlaschin/fp-patterns-buildstufflt
https://www.quora.com/What-are-some-functional-programming-design-patterns
https://csmith111.gitbooks.io/functional-reactive-programming-with-elm/content/FPpatterns.html
Monad vs Applicative
https://stackoverflow.com/questions/17409260/what-advantage-does-monad-give-us-over-an-applicative
https://stackoverflow.com/questions/45252709/what-is-the-difference-between-a-functor-and-a-monad
https://stackoverflow.com/questions/23342184/difference-between-monad-and-applicative-in-haskell
https://hackernoon.com/functor-applicative-and-monads-fp1e32eh

0_:::SCALA:::
Scala ogolnie,
https://stackoverflow.com/questions/1345713/what-are-the-benefits-of-scala
https://www.quora.com/Why-should-a-Java-developer-consider-switching-to-Scala?q=scala%20java
https://www.newgenapps.com/blog/advantages-of-using-scala/
https://www.quora.com/Is-the-Scala-language-better-than-Java
https://www.quora.com/What-are-the-advantages-of-Scala-over-Java-functional-programming
https://www.educba.com/scala-vs-java/
https://jaxenter.com/5-reasons-why-scala-is-better-than-java-130863.html
https://venturi-group.com/scala-vs-java-differences-similarities/
https://www.amazon.com/Functional-Programming-Patterns-Scala-Clojure/dp/1937785475
https://www.bti360.com/scala-vs-java-8-in-a-java-8-world/
https://www.infoq.com/articles/java-8-vs-scala/
https://blog.outsource2india.com/the-advantages-of-using-scala/
https://softwareengineering.stackexchange.com/questions/130335/why-is-scala-more-scalable-than-other-languages
https://data-flair.training/blogs/scala-advantages/
TypeClass,
https://blog.knoldus.com/getting-started-with-scala-cats/
https://medium.com/virtuslab/typeclasses-scala-be35c0ef0ee9
https://alvinalexander.com/scala/fp-book/type-classes-101-introduction/
https://scalac.io/typeclasses-in-scala/
https://gist.github.com/anonymous/b3bac2b3a2614c35b14365e2a0823a55
https://medium.com/@kolemannix/an-introduction-to-typeclasses-in-scala-26d4dc5fdf58
https://www.baeldung.com/scala/type-classes
Rozne,
https://github.com/Baeldung/scala-tutorials/tree/master/scala-core-fp
https://stackoverflow.com/questions/60128207/whats-the-difference-between-lazylist-and-stream-in-scala
https://blog.knoldus.com/getting-lazy-with-scala/
https://stackoverflow.com/questions/8000903/what-are-all-the-uses-of-an-underscore-in-scala
https://stackoverflow.com/questions/1791408/what-is-the-difference-between-a-var-and-val-definition-in-scala
https://stackoverflow.com/questions/214714/mutable-vs-immutable-objects
https://docs.scala-lang.org/overviews/collections/overview.html
https://www.baeldung.com/scala/mutability
https://blog.knoldus.com/scala-map-vs-flatmap/
https://stackoverflow.com/questions/26140757/what-to-choose-between-require-and-assert-in-scala
https://www.geeksforgeeks.org/scala-preconditionsassert-assume-require-ensuring/
https://maxondev.com/scala-preconditions-assert-assume-require-ensuring/
https://alvinalexander.com/scala/differences-java-thread-vs-scala-future/

Implicit,
https://alvinalexander.com/scala/scala-2.10-implicit-class-example/
https://www.baeldung.com/scala/implicit-classes
https://docs.scala-lang.org/overviews/core/implicit-classes.html
https://docs.scala-lang.org/tour/implicit-parameters.html
https://stackoverflow.com/questions/50593346/implicit-functions-in-scala-how-is-this-working
https://docs.scala-lang.org/tour/implicit-conversions.html
Hierarchia klas,
https://docs.scala-lang.org/tour/unified-types.html
Case classes vs classes,
https://stackoverflow.com/questions/2312881/what-is-the-difference-between-scalas-case-class-and-class
Sealed,
https://www.baeldung.com/scala/sealed-keyword
https://www.geeksforgeeks.org/scala-sealed-trait/
Currying partial functions,
https://dzone.com/articles/difference-between-currying-amp-partially-applied
https://alvinalexander.com/scala/fp-book/partially-applied-functions-currying-in-scala/
https://stackoverflow.com/questions/46347879/best-use-cases-for-currying-functions-and-partially-applied-functions-in-scala

https://docs.scala-lang.org/
https://www.geeksforgeeks.org/scala-programming-language/

https://www.journaldev.com/8958/scala-interview-questions-answers
https://www.journaldev.com/8960/scala-advanced-interview-questions
https://www.journaldev.com/9663/scala-interview-questions

Books: programming in scala | scala cookbook | funtional programming in scala |building applications with scala | Learning Concurrent Programming in Scala | https://softwareengineering.stackexchange.com/questions/89273/where-are-all-the-functional-programming-design-patterns

Scalaz:
https://leanpub.com/fpmortals-pl/read
http://eed3si9n.com/learning-scalaz/index.html

Cats: 
https://blog.knoldus.com/a-quick-start-to-cats-library/
https://typelevel.org/cats-effect/datatypes/io.html
https://typelevel.org/cats/
https://typelevel.org/cats-effect/
https://typelevel.org/cats/nomenclature.html
https://typelevel.org/cats/typelevelEcosystem.html
https://medium.com/@TamasPolgar/hack-how-to-use-scala-futures-with-cats-io-9278c7febc37
https://degoes.net/articles/only-one-io

Monix:
https://monix.io/
https://scalac.io/blog/monix-why-you-should-care-about/
http://www.beyondthelines.net/programming/futures-vs-tasks/
https://www.slideshare.net/hermannhueck/future-vs-monix-task

ZIO:
https://zio.dev/docs/overview/overview_index
https://degoes.net/articles/zio-cats-effect

Requests:
https://github.com/lihaoyi/requests-scala
https://www.lihaoyi.com/post/HowtoworkwithHTTPJSONAPIsinScala.html
http://www.lihaoyi.com/upickle/#uJson

0_:::HASKELL:::
https://mmhaskell.com/liftoff
https://mmhaskell.com/real-world
https://wiki.haskell.org/Tutorials
https://www.cis.upenn.edu/~cis194/spring13/lectures/04-higher-order.html
http://learnyouahaskell.com/introduction
https://www.tutorialspoint.com/haskell/haskell_functor.htm
https://www.schoolofhaskell.com/school/starting-with-haskell/basics-of-haskell
https://bartoszmilewski.com/2016/11/21/monads-programmers-definition/
https://acm.wustl.edu/functional/haskell.php
https://cnds.jacobs-university.de/courses/ics-2019/hs-intro.pdf
http://learnyouahaskell.com/higher-order-functions

https://www.reddit.com/r/haskell/comments/aif4rn/ok_ill_bite_what_does_haskell_do_better_than_scala/
https://stackoverflow.com/questions/9952602/does-haskell-require-a-garbage-collector
https://stackoverflow.com/questions/36772017/reducing-garbage-collection-pause-time-in-a-haskell-program
https://stackoverflow.com/questions/9547741/garbage-collection-in-haskell-parallel-computations?rq=1
https://www.fpcomplete.com/blog/2016/11/comparison-scala-and-haskell/
https://www.reddit.com/r/haskell/comments/3bx93a/haskellghc_garbage_collection/
https://docs.haskellstack.org/en/stable/README/
https://tech.channable.com/posts/2020-04-07-lessons-in-managing-haskell-memory.html

https://joelburget.com/data-newtype-instance-class/
https://stackoverflow.com/questions/12529439/what-is-the-differences-between-class-and-instance-declarations
https://stackoverflow.com/questions/44886668/what-does-instance-mean-in-haskell
https://wiki.haskell.org/Newtype
https://wiki.haskell.org/OOP_vs_type_classes
https://en.wikibooks.org/wiki/Haskell/Classes_and_types
https://wiki.haskell.org/Smart_constructors
https://www.parsonsmatt.org/2017/02/17/ooph_data_inheritance.html
https://stackoverflow.com/questions/51509949/what-do-haskell-data-constructors-construct
https://stackoverflow.com/questions/10313349/haskell-way-to-go-about-enums
https://stackoverflow.com/questions/6000511/better-way-to-define-an-enum-in-haskell

https://github.com/krispo/awesome-haskell

0_:::MODERN_TOOLS:::
:Kafka,
http://cloudurable.com/blog/kafka-architecture-low-level/index.html
http://cloudurable.com/blog/what-is-kafka/index.html
http://cloudurable.com/blog/kafka-architecture/index.html
http://cloudurable.com/blog/kafka-architecture-topics/index.html
http://cloudurable.com/blog/kafka-architecture-consumers/index.html
http://cloudurable.com/blog/kafka-architecture-producers/index.html
http://cloudurable.com/blog/kafka-architecture-log-compaction/index.html
https://beagle1984.github.io/silverback/docs/kafka/message-key
https://stackoverflow.com/questions/29511521/is-key-required-as-part-of-sending-messages-to-kafka
https://linuxhint.com/apache_kafka_partitions/
https://www.confluent.io/stream-processing-cookbook/ksql-recipes/setting-kafka-message-key/

partitioning | leaders | rebalance | controller | replica | retention | compation | producer-modes | ack statuses | streams | kafka vs jms | commit log | message key | join group request | sync async commitoff | request-consumer-producer

Books: Kafka – definitive guide

:Akka,
akka Pros and cons,
https://softwareengineering.stackexchange.com/questions/300396/why-is-akka-good-for-concurrency
https://softwareengineering.stackexchange.com/questions/212754/when-is-it-not-good-to-use-actors-in-akka-erlang
https://stackoverflow.com/questions/4493001/what-are-the-best-use-cases-for-akka-framework
https://www.oreilly.com/library/view/scala-reactive-programming/9781787288645/af49b94a-7c9f-4316-9173-6807a95539b1.xhtml

https://blog.knoldus.com/introduction-to-akka/
https://blog.knoldus.com/understanding-akka-actor-lifecycle/
https://www.baeldung.com/akka-actors-java
https://www.baeldung.com/scala/typed-akka
https://blog.knoldus.com/what-is-ask-pattern-in-akka/
https://blog.knoldus.com/circuit-breaker-in-akka/
https://blog.knoldus.com/achieving-concurrency-with-akka-actors/
https://blog.knoldus.com/concurrency-using-scala-problems-vs-tools/
https://blog.knoldus.com/akka-streams-all-about-materialization/
https://blog.knoldus.com/akka-stream-map-and-mapasync/
https://blog.knoldus.com/scale-out-with-cluster-sharding/
https://blog.knoldus.com/introduction-actor-model-akka-nutshell-1/
https://blog.knoldus.com/supervision-and-monitoring-in-akka/
https://www.signifytechnology.com/blog/2018/04/introduction-to-akka-actors-in-java-by-baeldung
https://www.oreilly.com/library/view/scala-reactive-programming/9781787288645/af49b94a-7c9f-4316-9173-6807a95539b1.xhtml
https://www.slideshare.net/krivachy/the-dark-side-of-akka-and-the-remedy
https://dzone.com/articles/3-reasons-why-akka-typed-helps-you-write-better-co
https://sap1ens.com/blog/2015/10/25/actors-streams-and-futures-in-akka/
https://eng.localytics.com/akka-streams-akka-without-the-actors/
https://manuel.bernhardt.io/2018/08/06/akka-anti-patterns-many-actors/
https://manuel.bernhardt.io/2019/07/11/tour-of-akka-typed-protocols-and-behaviors/

Books: Akka in Action

:ElasticSearch,
invertedindex | replica | primary shard | rodzaje wyszukiwania | mapping | analyzer | dynamic mapping | tokenizer | token filter | character filter | analyzer | type mapping | document(key, value) | lucene | bulk request | scan scroll | create update in depth

Books: ElatsticSearch definitive guide

:Spark
https://blog.knoldus.com/what-make-spark-so-powerful-part-1/
https://blog.knoldus.com/spark-structured-streaming-part-1-introduction/
https://blog.knoldus.com/spark-streaming-datasets/
https://blog.knoldus.com/stateful-streaming-in-spark/
https://blog.knoldus.com/broadcast-variables-in-spark-how-and-when-to-use-them/
https://www.tutorialspoint.com/apache_spark/advanced_spark_programming.htm
https://spark.apache.org/docs/latest/quick-start.html
https://www.tutorialkart.com/apache-spark/spark-parallelize-example/
https://sparkbyexamples.com/spark/spark-read-text-file-rdd-dataframe/

Books:

:Elastic Logstash Kibana
https://blog.knoldus.com/what-is-the-elk-stack/

Books:

Rozne,
https://blog.knoldus.com/akka-streams-streaming-done-right/
https://dzone.com/articles/comparing-akka-streams-kafka-streams-and-spark-str

0_:::NO_SQL:::
NoSQL pros and cons,
https://www.mongodb.com/scale/nosql-databases-pros-and-cons
https://stackoverflow.com/questions/5244437/pros-and-cons-of-mongodb
https://www.freecodecamp.org/news/nosql-databases-5f6639ed9574/
https://stackoverflow.com/questions/3342497/explanation-of-base-terminology
NoSQL vs SQL,
https://www.guru99.com/sql-vs-nosql.html
https://www.bmc.com/blogs/sql-vs-nosql/
Cassandra,
mongoDb,
https://www.guru99.com/what-is-mongodb.html
https://docs.mongodb.com/manual/applications/data-models-relationships/
https://stackoverflow.com/questions/5373198/mongodb-relationships-embed-or-reference
https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/
https://docs.mongodb.com/manual/aggregation/
https://www.compose.com/articles/aggregations-in-mongodb-by-example/


0_:::SIECI:::
Protokoly: TCP/IP HTTP, Telnet, FTP, TFTP, SNMP, DNS, SMTP
HTTP,
https://www.javatpoint.com/computer-network-http
https://developer.mozilla.org/pl/docs/Web/HTTP/HTTP_wiadomosci_og%C3%B3lne
https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:web-protocols/a/hypertext-transfer-protocol-http
TCP IP UDP,
https://www.javatpoint.com/tcp-vs-udp
DNS,
https://ns1.com/resources/dns-protocol
https://www.cloudflare.com/learning/dns/what-is-dns/
https://www.javatpoint.com/computer-network-dns
Rozne,
https://dlainformatyka.blogspot.com/2018/05/polecenie-netstat.html

Book: useful rozdzialy

0_:::GIT:::
https://stackoverflow.com/questions/804115/when-do-you-use-git-rebase-instead-of-git-merge
https://stackoverflow.com/questions/16666089/whats-the-difference-between-git-merge-and-git-rebase
https://blog.j-labs.pl/git-rebase-vs-merge
https://medium.com/datadriveninvestor/git-rebase-vs-merge-cc5199edd77c
https://www.atlassian.com/git/tutorials/merging-vs-rebasing
https://stackoverflow.com/questions/9069061/what-is-the-difference-between-git-merge-and-git-merge-no-ff
https://nvie.com/posts/a-successful-git-branching-model/
https://www.atlassian.com/git/tutorials/syncing/git-fetch
https://www.atlassian.com/git/tutorials/undoing-changes/git-reset
https://panizkomputerem.pl/3-sposoby-na-git-merge/
https://garrytrinder.github.io/2020/03/squashing-commits-using-interactive-rebase
https://stackoverflow.com/questions/2427238/what-is-the-difference-between-merge-squash-and-rebase
https://stackoverflow.com/questions/804115/when-do-you-use-git-rebase-instead-of-git-merge

0_:::ALGORYTMY:::
Zlozonosc obliczeniowa,
Zlozonosc pamieciowa,
Zlozonosc obliczeniowa struktur,
https://stackoverflow.com/questions/4553624/hashmap-get-put-complexity
Sortowania,
binarySearch,
rekursja,
Divide and conquer,
Np problem zupelny, 

https://www.geeksforgeeks.org/fundamentals-of-algorithms/
https://github.com/gadzikk/algorithms
http://wazniak.mimuw.edu.pl/index.php?title=Algorytmy_i_struktury_danych

0_:::ANGIELSKI:::
Czytanie,
Sluchanie,
Mowienie,
Pisanie,
Slownictwo


0_:::LINUX GREP SYSTEMY:::
Regexp,
Commands,
https://www.howtogeek.com/412055/37-important-linux-commands-you-should-know/
Shell script tutorial

0_:::ERROR EXCEPTIONS VALIDACJA:::
Validacja backend,
Validacja frontend,
Validacja baza danych,

https://www.journaldev.com/2167/java-exception-interview-questions-and-answers
https://stackoverflow.com/questions/35409216/how-to-handle-stackoverflowerror

0_:::ENCRYPTION ENCODING HASLA HASH SALT:::
Rodzaje autentykacji,
https://nordicapis.com/3-common-methods-api-authentication-explained/
https://blog.risingstack.com/web-authentication-methods-explained/
https://blog.bearer.sh/the-three-most-common-api-authentication-methods/
https://dzone.com/articles/four-most-used-rest-api-authentication-methods
https://blog.restcase.com/4-most-used-rest-api-authentication-methods/
https://www.csoonline.com/article/3216404/what-is-oauth-how-the-open-authorization-framework-works.html
https://sekurak.pl/oauth-2-0-jak-dziala-jak-testowac-problemy-bezpieczenstwa/
Rodzaje autoryzacji,
Metody enkrypcji,
Metody enkodowania,

0_:::DEVOPS:::
Docker,
https://www.guru99.com/docker-tutorial.html
https://www.rangeforce.com/blog/docker-software-basics
https://vsupalov.com/6-docker-basics/
https://thenewstack.io/docker-station-part-one-essential-docker-concepts-tools-terminology/
https://www.tutorialspoint.com/docker/docker_containers.htm
https://searchitoperations.techtarget.com/definition/Docker-image
Kubernetes,
Azure,
AWS,
https://www.javatpoint.com/aws-global-infrastructure
https://medium.com/javarevisited/top-10-courses-to-learn-amazon-web-services-aws-cloud-in-2020-best-and-free-317f10d7c21d
https://towardsdatascience.com/top-12-ways-to-learn-aws-for-free-1113af329d06
https://aws.amazon.com/training/
https://aws.amazon.com/getting-started/fundamentals-core-concepts/?e=gs2020&p=fundoverview
https://aws.amazon.com/getting-started/
https://www.guru99.com/aws-tutorial.html
https://www.quora.com/What-is-the-best-resource-for-learning-AWS

Rozne,
https://www.baeldung.com/cs/virtualization-vs-containerization
https://www.liquidweb.com/kb/virtualization-vs-containerization/
https://www.burwood.com/blog-archive/containerization-vs-virtualization
https://en.wikipedia.org/wiki/Virtualization
https://www.cio.com/article/2924995/what-are-containers-and-why-do-you-need-them.html
http://www.serverspace.co.uk/blog/containerisation-vs-virtualisation-whats-the-difference
https://www.guru99.com/kubernetes-vs-docker.html

https://www.guru99.com/docker-interview-questions.html
https://training.play-with-docker.com/

Books: docker folder

0_:::KONFIGURACJA:::
Maven,
Gradle,
Hibernate,
Spring,
Database,
Mircroservice,
Tomcat,

Praktyka: BBH, CL


0_:::CONTINOUS DEPLOYMENT:::
Jenkins,
sonarCube,


0_:::METODYKI:::
Agile,
Manifest agile,
Scrum,
Kanban,
Extreme programming,

https://en.wikipedia.org/wiki/Complement_(set_theory)#Relative_complement

0_:::WIEDZA Z ARTYKULOW:::
jrevised | javaworld | journaldev | dzone | howtodoinjava |

0_:::PRAKTYCZNE PROJEKTY:::
BBH, CL dobre praktyki
IOB, GUPS, ALI, boss, bpa-configi



0_:::SQL DATABASES:::
 bazy grafowe, problem transakcji(https://docs.oracle.com/javase/tutorial/jdbc/basics/transactions.html ),
lazy vs eager, rodzaje joinow, procedury projektu na studia, caching,
https://en.wikipedia.org/wiki/ACID
https://www.geeksforgeeks.org/acid-properties-in-dbms/
https://www.bmc.com/blogs/acid-atomic-consistent-isolated-durable/
https://www.oracletutorial.com/oracle-basics/oracle-not-exists/
http://www.dba-oracle.com/t_tuning_where_not_exists_sql.htm
https://www.techonthenet.com/postgresql/vacuum.php
https://www.w3schools.com/sql/sql_injection.asp
https://stackoverflow.com/questions/1388059/sql-server-index-columns-used-in-like
https://use-the-index-luke.com/sql/testing-scalability
https://stackoverflow.com/questions/6142235/sql-like-vs-performance
https://stackoverflow.com/questions/2955459/what-is-an-index-in-sql
https://stackoverflow.com/questions/1108/how-does-database-indexing-work
https://www.sqlteam.com/articles/sql-server-indexes-the-basics
https://docs.microsoft.com/en-us/sql/relational-databases/indexes/clustered-and-nonclustered-indexes-described?redirectedfrom=MSDN&view=sql-server-ver15
https://www.red-gate.com/simple-talk/sql/learn-sql-server/sql-server-index-basics/
https://www.geeksforgeeks.org/sql-indexes/
https://www.sqlshack.com/top-10-questions-answers-sql-server-indexes/
http://sqlszkolenia.pl/aktualnosci/18-jak-dziala-join-w-sql-server
https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/
https://www.softwaretestinghelp.com/inner-join-vs-outer-join/
https://www.toolbox.com/tech/data-management/question/join-performance-inner-join-or-left-outer-join-030110/
https://dba.stackexchange.com/questions/229165/why-is-this-left-join-faster-than-an-inner-join
https://www.sqlshack.com/design-sql-queries-better-performance-select-exists-vs-vs-joins/
https://forums.mysql.com/read.php?115,647656,647656
https://stackoverflow.com/questions/2726657/inner-join-vs-left-join-performance-in-sql-server
https://pl.wikipedia.org/wiki/Posta%C4%87_normalna_(bazy_danych)



https://www.quora.com/What-is-a-good-book-on-implementing-a-Relational-Database
T-SQL Querying
SQL Performance Tuning
optimalization DB
https://www.toptal.com/sql-server/sql-database-tuning-for-developers
types (graph DB, NoSQL) and deep

http://nbcampus.com/home/postgresql/postgresql-dba-interview-questions-2020/
https://www.onlineinterviewquestions.com/postgresql-interview-questions/

book: hibernate in action, oracle performance survival guide, High-Performance Java Persistence | java persistence with hibernate | postgresql 10 high performance | OCA Oracle Database 12c | podrecznik jezyka sql - przejrzec | podstawy jezyka sql - przejrzec

0_:::REACTIVE_PROGRAMMING:::
https://github.com/ReactiveX/RxJava
https://javastart.pl/b/java/rxjava-wprowadzenie/
https://bartlomiejchmielewski.pl/rxjava/
https://www.baeldung.com/rx-java
https://projectreactor.io/docs/core/release/reference/
https://www.baeldung.com/reactor-core

0_:::JAVASCRIPT:::
a)plain js
http://eloquentjavascript.net/00_intro.html
https://github.com/getify/You-Dont-Know-JS
https://youtube.com/watch?v=Bv_5Zv5c-Ts
http://es6-features.org/#Constants
https://youtube.com/results?search_query=es6+features
https://youtube.com/watch?t=&v=-q1z8BPFItw
http://javascript.info/ui
https://youtube.com/watch?v=8aGhZQkoFbQ
https://medium.com/better-programming/tagged/javascript
https://javascript.info/symbol
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises
https://developers.google.com/web/fundamentals/primers/async-functions
https://kursjs.pl/kurs/es6/ecma-script-2015.php
https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36
https://m.youtube.com/watch?v=1qXypjZu0sU
https://typeofweb.com/2017/11/14/this-js-kontekst-wywolania-funkcji/
https://typeofweb.com/2017/10/23/kilka-faktow-na-temat-promise/
http://www.algosmart.pl/zakresy-powtorka-reactjs-7/
https://www.w3.org/TR/REC-DOM-Level-1/introduction.html
info:  https://4programmers.net/Forum/JavaScript/284930-jak_uczyc_sie_javascript_przeczytaj_zanim_zadasz_pytanie_na_temat_materialow_do_nauki?page=1

https://www.guru99.com/javascript-interview-questions-answers.html
https://www.w3schools.com/js/default.asp
https://dev.to/macmacky/70-javascript-interview-questions-5gfi

https://developer.mozilla.org/pl/docs/Web/JavaScript/EventLoop
https://geek.justjoin.it/event-loop-a-kolejnosc-wykonywania-kodu-javascript
https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5
https://flaviocopes.com/javascript-event-loop/
https://stackoverflow.com/questions/5654447/whats-the-difference-between-scss-and-sass
https://ach-te-internety.pl/sass-i-scss/
https://www.tutorialsteacher.com/javascript/prototype-in-javascript
https://medium.com/@parsyval/javascript-prototype-vs-class-a7015d5473b
https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9
https://javascript.info/prototype-inheritance
https://www.tutorialsteacher.com/javascript/immediately-invoked-function-expression-iife
https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var
https://bulldogjob.pl/news/1062-var-let-i-const-hoisting-i-zasieg-w-javascript
https://www.tutorialsteacher.com/javascript/javascript-hoisting
https://www.tutorialsteacher.com/javascript/javascript-strict
https://www.tutorialsteacher.com/javascript/javascript-eval
https://stackoverflow.com/questions/51716808/when-use-a-interface-or-class-in-typescript
https://medium.com/front-end-weekly/typescript-class-vs-interface-99c0ae1c2136
https://medium.com/javascript-in-plain-english/interfaces-and-classes-in-typescript-part-6-3-7fee77b7518b
https://developer.mozilla.org/pl/docs/orphaned/Web/Guide/HTML/HTML5
https://dev.to/steelvoltage/if-javascript-is-single-threaded-how-is-it-asynchronous-56gd

b) angular
https://www.angular.love/2018/07/04/rxjs-w-angular-co-wypada-wiedziec/
https://jasonwatmore.com/post/2019/02/07/angular-7-communicating-between-components-with-observable-subject
https://angular.io/guide/attribute-directives
https://www.sitepoint.com/practical-guide-angular-directives/
https://blog.angular-university.io/how-does-angular-2-change-detection-really-work/
https://www.angular.love/2017/01/15/angular-2-change-detector-mechanizmy-detekcji-oraz-strategia-onpush/
https://medium.com/@bencabanes/angular-change-detection-strategy-an-introduction-819aaa7204e7

https://github.com/sudheerj/angular-interview-questions
https://www.interviewbit.com/angular-interview-questions/
https://www.edureka.co/blog/interview-questions/top-angularjs-interview-questions-2016/

dokumentacja
projekt GUPS
projekt IOB
angular animations

b2)angularJS
projekt harp
swoj projekt w repo
https://www.udemy.com/learn-angularjs/
https://youtube.com/channel/UCJ1GreMvJv6U5JtPGCinwJw/playlists?view=50&sort=dd&shelf_id=12

c)rxjs
https://www.google.com/search?q=rxjs&ie=utf-8&oe=utf-8&client=firefox-b-e

d) odswiezyc jquery
dokumentacja
projekt tiger
youtube jquery
jquery best practices

e)react + redux
##TODO##

(op) https://github.com/getify/Functional-Light-JS


0_:::STUDIA:::
https://syllabuskrk.agh.edu.pl/2018-2019/pl/magnesite/study_plans/niestacjonarne-informatyka

0_:::NIEZWIAZANE:::
https://morethancoding.com/2011/05/22/the-programmer-pyramid/
http://scala-poland.eu/companies/




otherTools:
Spark, Akka, Storm, Hadoop, Sqoop, Cassandra, AWS https://www.udemy.com/aws-w-7-dni/
, PLAY,  Cassandra / Redis/ concord / scalaZ / liftweb
Landoop Lenses /Apache Flink / Apache Spark
HBase, and/or MapReduce
Hadoop jako stack (YARN + HDFS + Hive)
scalaz, cats, http4s
