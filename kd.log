
0_:::JAVA:::

OOP,
Zasady programowania obiektowego,
SOLID,
Design patterns https://github.com/gadzikk/algorithms/tree/master/src/main/java/design_patterns
Static (pelne przeznaczenie),
Final (pelne przeznaczenie),
Kolejnosc wykonania(constructor, postConstruct, static block, dependency injection)
Recursion vs recurresion vs recursion tail,
Plik buffery,
Reflection,

https://www.geeksforgeeks.org/java

book: Effective Java | Thinking in Java | Clean code | Designing Data-Intensive Applications

:JVM
Garbage collector struktura,
Garbage collector zasada dzialania,
Garbage collector tryby (oraz plusy I minusy),
Monitorowanie,
stackOverFlowError,
outOfMemoryError,
Jstack, jmap
Alokacja obiektow,
Alkokacja watkow,

https://dzone.com/articles/understanding-jvm-internals
https://medium.com/better-programming/understand-threads-and-threading-in-java-8f706fc44d13
https://stackoverflow.com/questions/33344123/every-jvm-created-for-each-application-is-this-a-thread-or-a-process
https://www.infoworld.com/article/3336222/java-challengers-6-thread-behavior-in-the-jvm.html
https://www.infoworld.com/article/2076971/how-the-java-virtual-machine-performs-thread-synchronization.html
https://blog.jamesdbloom.com/JVMInternals.html

:J8
Nowe wersje javy co wprowadzono,
Lambda,
Streams,
Map, reduce, collect, sorting, consumer, producer, supplier, function

book: java8 in action

:JLibaries
https://dzone.com/articles/20-useful-open-source-libraries-for-java-programme


0_:::CONCURRENCY:::
Prons and cons of concurrency,
Deadlock, starvation,
Producer consumer,
Dinning philosopers
Race condition,
Synchronization, Mutex, Sempahores,
Volatile vs Atomic,

Jenkov,
Wyklady kalety,
book: Java Concurrency in practice | concurrency cookbook

0_:::MICROSERVICES:::
Microservice vs monotlith,
DDD,
Resilience patters,
Transaction patterns,
Deployment patterns,
Api gateway,
Saga,
CQRS,
Event Sourcing,
SOA

https://microservices.io/
https://medium.com/@goodrebels/to-go-or-not-to-go-micro-the-pros-and-cons-of-microservices-7967418ff06
https://cloudacademy.com/blog/microservices-architecture-challenge-advantage-drawback/
https://tsh.io/blog/basics-of-microservices-pros-and-cons/
https://www.springboottutorial.com/creating-microservices-with-spring-boot-part-1-getting-started


Books: microservices patterns

0_:::TESTOWANIE:::
Testy unit,
testy Integracyjne,
testy funkcjonalne,
testy E2E,

junit5, assertJ, mockito

TDD – podejscie, prons cons, praktyka
Piramida testow
podejscie zastosowanie w praktyce
narzedzia
https://hackernoon.com/5-courses-java-programmers-can-join-to-learn-junit-and-mockito-in-2019-h74t38r4

book: tdd teoria

0_:::WEB_FRAMEWORKS:::
Spring,
Spring boot,
Hibernate,

Books: J2EE developer handbook | Core j2ee patterns – przejzec | 00 – przejrzec, | hibernate in action | pro spring 5 |

0_:::WEBSERVICES:::
SOAP,
REST
RESTClient,
HTTP (jak dziala, statusy, odpowiedzi, filtry, servlety),

Books: J2EE essentials | Java Web Services

0_:::MESSAGING:::
JMS,persistent vs nonpersistent | pub sub vs ptp | problem | queue vs topic,
Kafka,
JMS vs Kafka

0_:::FUNTIONAL_PROGRAMMING:::
Prons and cons of functional programming,
Monads,
Functional programming patterns

0_:::SCALA:::
Scala: implicit | functor vs applicative vs monad | hierarchia klas | case classes vs classes | sealed classes | currying | partial functions

https://docs.scala-lang.org/
https://www.geeksforgeeks.org/scala-programming-language/

Books: programming in scala | scala cookbook | funtional programming in scala |
building applications with scala | Learning Concurrent Programming in Scala

Scalaz: fpmortals | eed3 | catsdoc



0_:::MODERN_TOOLS:::
:Kafka,
partitioning | leaders | rebalance | controller | replica | retention | compation | producer-modes | ack statuses | streams | kafka vs jms | commit log | message key | join group request | sync async commitoff | request-consumer-producer

Books: Kafka – definitive guide

:Akka,

Books: Akka in Action

:ElasticSearch,
invertedindex | replica | primary shard | rodzaje wyszukiwania | mapping | analyzer | dynamic mapping | tokenizer | token filter | character filter | analyzer | type mapping | document(key, value) | lucene | bulk request | scan scroll | create update in depth

Books: ElatsticSearch definitive guide

:Spark

Books:

:Elastic Logstash Kibana

Books:

0_:::NO_SQL:::
NoSQL prons and cons,
NoSQL vs SQL,
Cassandra,
mongoDb,

0_:::SIECI:::
Protokoly: TCP/IP HTTP, Telnet, FTP, TFTP, SNMP, DNS, SMTP

Book: useful rozdzialy


0_:::ALGORYTMY:::
Zlozonosc obliczeniowa,
Zlozonosc pamieciowa,
Zlozonosc obliczeniowa struktur,
Sortowania,
binarySearch,
rekursja,

https://www.geeksforgeeks.org/fundamentals-of-algorithms/
https://github.com/gadzikk/algorithms
http://wazniak.mimuw.edu.pl/index.php?title=Algorytmy_i_struktury_danych

0_:::ANGIELSKI:::
Czytanie,
Sluchanie,
Mowienie,
Pisanie,
Slownictwo


0_:::LINUX GREP SYSTEMY:::
Regexp,
Commands,
https://www.howtogeek.com/412055/37-important-linux-commands-you-should-know/
Shell script tutorial

0_:::ERROR EXCEPTIONS VALIDACJA:::
Validacja backend,
Validacja frontend,
Validacja baza danych,

0_:::ENCRYPTION ENCODING HASLA HASH SALT:::
Rodzaje autentykacji
Rodzaje autoryzacji
Metody enkrypcji
Metody enkodowania

0_:::DEVOPS:::
Docker,
Azure,
AWS,

Books: docker folder

0_:::KONFIGURACJA:::
Maven,
Gradle,
Hibernate,
Spring,
Database,
Mircroservice,
Tomcat,

Praktyka: BBH, CL


0_:::CONTINOUS DEPLOYMENT::
Jenkins,
sonarCube,


0_:::METODYKI:::
Agile,
Manifest agile,
Scrum,
Kanban,
Extreme programming,

https://en.wikipedia.org/wiki/Complement_(set_theory)#Relative_complement

0_:::WIEDZA Z ARTYKULOW:::
jrevised | javaworld | journaldev | dzone | howtodoinjava |

0_:::PRAKTYCZNE PROJEKTY:::
BBH, CL dobre praktyki
IOB, GUPS, ALI, boss, bpa-configi



0_:::SQL DATABASES:::
inheritance hibernate, bazy grafowe, n+1 problem, problem transakcji(https://docs.oracle.com/javase/tutorial/jdbc/basics/transactions.html ),
lazy vs eager, rodzaje joinow, procedury projektu na studia, caching, optimistic/pesimitic locking, versioning

https://www.oracletutorial.com/oracle-basics/oracle-not-exists/
http://www.dba-oracle.com/t_tuning_where_not_exists_sql.htm


https://www.quora.com/What-is-a-good-book-on-implementing-a-Relational-Database
T-SQL Querying
SQL Performance Tuning
optimalization DB
https://www.toptal.com/sql-server/sql-database-tuning-for-developers
types (graph DB, NoSQL) and deep

book: hibernate in action, oracle performance survival guide, High-Performance Java Persistence | java persistence with hibernate | postgresql 10 high performance | OCA Oracle Database 12c | podrecznik jezyka sql - przejrzec | podstawy jezyka sql - przejrzec

0_:::JAVASCRIPT:::
a)plain js
http://eloquentjavascript.net/00_intro.html
https://github.com/getify/You-Dont-Know-JS
https://youtube.com/watch?v=Bv_5Zv5c-Ts
http://es6-features.org/#Constants
https://youtube.com/results?search_query=es6+features
https://youtube.com/watch?t=&v=-q1z8BPFItw
http://javascript.info/ui
https://youtube.com/watch?v=8aGhZQkoFbQ
https://medium.com/better-programming/tagged/javascript
https://javascript.info/symbol
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises
https://developers.google.com/web/fundamentals/primers/async-functions
https://kursjs.pl/kurs/es6/ecma-script-2015.php
https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36
https://m.youtube.com/watch?v=1qXypjZu0sU
https://typeofweb.com/2017/11/14/this-js-kontekst-wywolania-funkcji/
https://typeofweb.com/2017/10/23/kilka-faktow-na-temat-promise/
http://www.algosmart.pl/zakresy-powtorka-reactjs-7/

info:  https://4programmers.net/Forum/JavaScript/284930-jak_uczyc_sie_javascript_przeczytaj_zanim_zadasz_pytanie_na_temat_materialow_do_nauki?page=1
b)angularJS
projekt harp
swoj projekt w repo
https://www.udemy.com/learn-angularjs/
https://youtube.com/channel/UCJ1GreMvJv6U5JtPGCinwJw/playlists?view=50&sort=dd&shelf_id=12

b2) angular
dokumentacja
projekt GUPS
projekt IOB
angular animations

c)rxjs
https://www.google.com/search?q=rxjs&ie=utf-8&oe=utf-8&client=firefox-b-e

d) odswiezyc jquery
dokumentacja
projekt tiger
youtube jquery
jquery best practices

e)react + redux
##TODO##

(op) https://github.com/getify/Functional-Light-JS


0_:::STUDIA:::
https://syllabuskrk.agh.edu.pl/2018-2019/pl/magnesite/study_plans/niestacjonarne-informatyka








otherTools:
Spark, Akka, Storm, Hadoop, Sqoop, Cassandra, AWS https://www.udemy.com/aws-w-7-dni/
, PLAY,  Cassandra / Redis/ concord / scalaZ / liftweb
Landoop Lenses /Apache Flink / Apache Spark
HBase, and/or MapReduce
Hadoop jako stack (YARN + HDFS + Hive)
scalaz, cats, http4s
